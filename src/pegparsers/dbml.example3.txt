// comment 1

/* muly
line comment */

Table users {
    id integer
    username varchar
    role varchar
    created_at timestamp
}

Table posts {
    id integer [primary key]
    title varchar
    body text [note: 'Content of the post']
    user_id integer
    created_at timestamp
}

Ref: posts.user_id > users.id // many-to-one

Project project_name {
  database_type: 'PostgreSQL'
  Note: 'Description of the project'
}

Table core.user {
    // empty
}

// table belonged to default "public" schema
Table table_name {
    column_name column_type [column_settings]
}

// table belonged to a schema
Table schema_name.table_name {
    column_name column_type [column_settings]
}

Table very_long_user_table as U {

}

Ref: U.id < posts.user_id

Table users {
    id integer
    status varchar [note: 'status']

    Note: 'Stores user data'
}

Table users [headercolor: #3498DB] {
    id integer [primary key]
    username varchar(255) [not null, unique]
}

Table buildings {
    address varchar(255) [unique, not null, note: 'to include unit number']
    id integer [ pk, unique, default: 123, note: 'Number' ]
}

Table users {
    id integer [primary key]
    username varchar(255) [not null, unique]
    full_name varchar(255) [not null]
    gender varchar(1) [not null]
    source varchar(255) [default: 'direct']
    created_at timestamp [default: `now()`]
    rating integer [default: 10]
}

Table bookings {
  id integer
  country varchar
  booking_date date
  created_at timestamp

  indexes {
      (id, country) [pk] // composite primary key
      created_at [name: 'created_at_index', note: 'Date']
      booking_date
      (country, booking_date) [unique]
      booking_date [type: hash]
      (`id*2`)
      (`id*3`,`getdate()`)
      (`id*3`,id)
  }
}

Table posts {
    id integer [primary key]
    user_id integer [ref: > users.id] // many-to-one
}

// or this
Table users {
    id integer [ref: < posts.user_id, ref: < reviews.user_id] // one to many
}

// The space after '<' is optional

//Long form
Ref name_optional {
  schema1.table1.column1 < schema2.table2.column2
}

//Short form:
Ref name_optional: schema1.table1.column1 < schema2.table2.column2

// Inline form
Table schema2.table2 {
    id integer
    column2 integer [ref: > schema1.table1.column1]
}

Table core.users {
    id integer [pk]
}

Table blogging.posts {
    id integer [pk]
    user_id integer [ref: > core.users.id]
}

// or this
Ref: blogging.posts.user_id > core.users.id

Ref: products.merchant_id > merchants.id [delete: cascade, update: no action]

// order_items refer to items from that order

/*
    This is a
    Multi-lines
    comment
*/

Table users {
  id int [pk]
  name varchar

  Note: 'This is a note of this table'
  // or
  Note {
    'This is a note of this table'
  }
}

Project DBML {
  Note: '''
    # DBML - Database Markup Language
    DBML (database markup language) is a simple, readable DSL language designed to define database structures.

    ## Benefits

    * It is simple, flexible and highly human-readable
    * It is database agnostic, focusing on the essential database structure definition without worrying about the detailed syntaxes of each database
    * Comes with a free, simple database visualiser at [dbdiagram.io](http://dbdiagram.io)
  '''
}

Table users {
  id int [pk]
  name varchar

  Note: 'Stores user data'
}

Table orders {
    status varchar [
    note: '''
    💸 1 = processing,
    ✔️ 2 = shipped,
    ❌ 3 = cancelled,
    😔 4 = refunded
    ''']
}

// enum belonged to default "public" schema
enum job_status {
    created [note: 'Waiting to be processed']
    running
    done
    failure
}

// enum belonged to a schema
enum v2.job_status {
    created
    done
}

Table jobs {
    id integer
    status job_status
    status_v2 v2.job_status
}

enum grade {
    "A+"
    "A"
    "A-"
    "Not Yet Set"
}

TableGroup tablegroup_name { // tablegroup is case-insensitive.
    table1
    table2
    table3
}

//example
TableGroup e-commerce1 {
    merchants
    countries
}
